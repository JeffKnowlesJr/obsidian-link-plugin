import esbuild from 'esbuild'
import process from 'process'
import builtins from 'builtin-modules'
import { readdirSync, readFileSync } from 'fs'
import { join, resolve } from 'path'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = process.argv[2] === 'production'

// Define patterns to exclude
const excludePatterns = [
  /(__tests__|tests|__mocks__)/,
  /(test|spec)\.ts$/,
  /jest\.config/,
  /jest\.setup/
]

const context = await esbuild.context({
  banner: {
    js: banner
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    ...builtins
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'main.js',
  plugins: [
    {
      name: 'exclude-test-files',
      setup(build) {
        // Exclude all test, mock, and spec files
        build.onResolve({ filter: /.*/ }, (args) => {
          const path = args.path

          // Check if the path matches any exclude pattern
          if (excludePatterns.some((pattern) => pattern.test(path))) {
            return { path, external: true }
          }

          // Also check the path with the resolveDir
          if (args.resolveDir) {
            const fullPath = join(args.resolveDir, path)
            if (excludePatterns.some((pattern) => pattern.test(fullPath))) {
              return { path, external: true }
            }
          }

          return null
        })

        // Remove any remaining Jest references in the final bundle
        build.onLoad({ filter: /\.tsx?$/ }, async (args) => {
          // Skip known test files
          if (excludePatterns.some((pattern) => pattern.test(args.path))) {
            return null
          }

          // Read the file content
          const text = readFileSync(args.path, 'utf8')

          // Replace any Jest imports and references
          const transformed = text
            .replace(/\b(import|require)\s*\(\s*['"]jest['"]\s*\)/g, '{}')
            .replace(/\b(import|require)\s*\(\s*['"].*jest.*['"]\s*\)/g, '{}')
            .replace(/\bimport\s+.*\s+from\s+['"]jest['"]/g, '')
            .replace(/\bimport\s+.*\s+from\s+['"].*jest.*['"]/g, '')
            .replace(/\bjest\s*\.\s*\w+/g, '() => {}')
            .replace(/\bjest\s*\,/g, '')
            .replace(/\s*,\s*jest\b/g, '')

          return {
            contents: transformed,
            loader: args.path.endsWith('.ts') ? 'ts' : 'tsx'
          }
        })

        build.onEnd(() => {
          console.log('Build complete!')
        })
      }
    }
  ]
})

if (prod) {
  await context.rebuild()
  process.exit(0)
} else {
  await context.watch()
}

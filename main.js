/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/constants.ts
var DEFAULT_BASE_FOLDER = "LinkPlugin";
var DEFAULT_DIRECTORIES = [
  "journal",
  "templates",
  "workspace",
  "reference"
];
var OPTIONAL_DIRECTORIES = [
  "context",
  "schema",
  "Projects"
];
var COMMAND_IDS = {
  CREATE_LINKED_NOTE: "create-linked-note",
  REBUILD_DIRECTORY: "rebuild-directory-structure",
  OPEN_TODAY_JOURNAL: "open-today-journal",
  CREATE_TODAY_NOTE: "create-today-note",
  CREATE_FUTURE_NOTE: "create-future-note",
  CREATE_MONTHLY_FOLDERS: "create-monthly-folders",
  EXPAND_SHORTCODE: "expand-shortcode",
  SHOW_LINK_SUGGESTIONS: "show-link-suggestions"
};
var DATE_FORMATS = {
  DEFAULT_JOURNAL: "YYYY-MM-DD dddd",
  ISO_DATE: "YYYY-MM-DD",
  FOLDER_FORMAT: "YYYY/MM"
};
var DEFAULT_TEMPLATES = {
  JOURNAL: `# {{date}}

## Daily Log

## Tasks
- [ ] 

## Notes

## Reflection

---
Previous: {{previous}}
Next: {{next}}
`,
  NOTE: `---
title: {{title}}
created: {{date}}
source: {{source}}
tags: []
---

# {{title}}

`
};
var REGEX_PATTERNS = {
  WIKI_LINK: /\[\[(.*?)\]\]/g,
  SHORTCODE: /[\w>+*{}\[\]()]+$/,
  DATE_FILENAME: /\d{4}-\d{2}-\d{2}/,
  INVALID_FILENAME_CHARS: /[\\/:*?"<>|]/g
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  // Directory structure settings
  baseFolder: DEFAULT_BASE_FOLDER,
  // Creates all directories under 'LinkPlugin/' by default
  directoryStructure: DEFAULT_DIRECTORIES,
  restrictedDirectories: [],
  documentDirectory: "workspace",
  // Updated to match README structure
  journalRootFolder: "journal",
  // Updated to match README structure
  // Journal settings
  journalDateFormat: DATE_FORMATS.DEFAULT_JOURNAL,
  journalFolderFormat: DATE_FORMATS.FOLDER_FORMAT,
  journalTemplate: DEFAULT_TEMPLATES.JOURNAL,
  // Note creation settings
  noteTemplate: DEFAULT_TEMPLATES.NOTE,
  openNewNote: true,
  // Shortcode settings
  shortcodeEnabled: true,
  shortcodeTriggerKey: "Tab",
  customShortcodes: {},
  // Other settings
  debugMode: false
};
function validateSettings(settings) {
  const validatedSettings = { ...DEFAULT_SETTINGS };
  if (settings.baseFolder && typeof settings.baseFolder === "string") {
    validatedSettings.baseFolder = settings.baseFolder.trim();
  }
  if (settings.directoryStructure && Array.isArray(settings.directoryStructure)) {
    validatedSettings.directoryStructure = settings.directoryStructure;
  }
  if (settings.restrictedDirectories && Array.isArray(settings.restrictedDirectories)) {
    validatedSettings.restrictedDirectories = settings.restrictedDirectories;
  }
  if (settings.documentDirectory && typeof settings.documentDirectory === "string") {
    validatedSettings.documentDirectory = settings.documentDirectory;
  }
  if (settings.journalRootFolder && typeof settings.journalRootFolder === "string") {
    validatedSettings.journalRootFolder = settings.journalRootFolder;
  }
  if (settings.journalDateFormat && typeof settings.journalDateFormat === "string") {
    validatedSettings.journalDateFormat = settings.journalDateFormat;
  }
  if (settings.journalFolderFormat && typeof settings.journalFolderFormat === "string") {
    validatedSettings.journalFolderFormat = settings.journalFolderFormat;
  }
  if (settings.journalTemplate && typeof settings.journalTemplate === "string") {
    validatedSettings.journalTemplate = settings.journalTemplate;
  }
  if (settings.noteTemplate && typeof settings.noteTemplate === "string") {
    validatedSettings.noteTemplate = settings.noteTemplate;
  }
  if (typeof settings.openNewNote === "boolean") {
    validatedSettings.openNewNote = settings.openNewNote;
  }
  if (typeof settings.shortcodeEnabled === "boolean") {
    validatedSettings.shortcodeEnabled = settings.shortcodeEnabled;
  }
  if (settings.shortcodeTriggerKey && typeof settings.shortcodeTriggerKey === "string") {
    validatedSettings.shortcodeTriggerKey = settings.shortcodeTriggerKey;
  }
  if (settings.customShortcodes && typeof settings.customShortcodes === "object") {
    validatedSettings.customShortcodes = settings.customShortcodes;
  }
  if (typeof settings.debugMode === "boolean") {
    validatedSettings.debugMode = settings.debugMode;
  }
  return validatedSettings;
}

// src/ui/settingsTab.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("Enable debug logging").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/managers/directoryManager.ts
var import_obsidian3 = require("obsidian");

// src/utils/pathUtils.ts
var import_obsidian2 = require("obsidian");
var PathUtils = class {
  static sanitizePath(path) {
    return (0, import_obsidian2.normalizePath)(path.replace(/[\/:*?"<>|]/g, "").trim());
  }
  static joinPath(...segments) {
    return (0, import_obsidian2.normalizePath)(segments.filter(Boolean).join("/"));
  }
};

// src/managers/directoryManager.ts
var DirectoryManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Creates the base directory structure according to settings
   * All directories are created under the configured baseFolder to prevent collisions
   */
  async rebuildDirectoryStructure() {
    const { vault } = this.plugin.app;
    const { baseFolder, directoryStructure } = this.plugin.settings;
    try {
      const basePath = (0, import_obsidian3.normalizePath)(baseFolder);
      await this.getOrCreateDirectory(basePath);
      console.log(`Created base directory: ${basePath}`);
      for (const dirName of directoryStructure || DEFAULT_DIRECTORIES) {
        const dirPath = PathUtils.joinPath(basePath, dirName);
        await this.getOrCreateDirectory(dirPath);
        console.log(`Created directory: ${dirPath}`);
      }
      await this.createJournalStructure(basePath);
      await this.createReferenceStructure(basePath);
    } catch (error) {
      throw new Error(`Failed to rebuild directory structure: ${error}`);
    }
  }
  /**
   * Creates the detailed journal structure as specified in README
   */
  async createJournalStructure(basePath) {
    const journalPath = PathUtils.joinPath(basePath, "journal");
    const journalSubdirs = [
      "Misc",
      "y_2025/January",
      "y_2025/February",
      "y_2025/March",
      "y_2025/April",
      "y_2025/May",
      "y_2025/June",
      "y_2025/Misc",
      "y_2025/Yearly List",
      "y_2025/Yearly Log",
      "z_Archives/y_2022",
      "z_Archives/y_2023",
      "z_Archives/y_2024"
    ];
    for (const subdir of journalSubdirs) {
      const fullPath = PathUtils.joinPath(journalPath, subdir);
      await this.getOrCreateDirectory(fullPath);
      console.log(`Created journal directory: ${fullPath}`);
    }
  }
  /**
   * Creates the reference file structure as specified in README
   */
  async createReferenceStructure(basePath) {
    const referencePath = PathUtils.joinPath(basePath, "reference");
    const fileTypes = ["images", "pdfs", "videos", "audio", "docs", "other"];
    for (const fileType of fileTypes) {
      const filePath = PathUtils.joinPath(referencePath, "files", fileType);
      await this.getOrCreateDirectory(filePath);
      console.log(`Created reference directory: ${filePath}`);
    }
  }
  /**
   * Creates optional complex structure directories
   */
  async createOptionalStructure(basePath) {
    for (const dirName of OPTIONAL_DIRECTORIES) {
      const dirPath = PathUtils.joinPath(basePath, dirName);
      await this.getOrCreateDirectory(dirPath);
      console.log(`Created optional directory: ${dirPath}`);
    }
  }
  /**
   * Gets a directory path, creating it if it doesn't exist
   * Handles both absolute paths and paths relative to the base folder
   */
  async getOrCreateDirectory(path) {
    const { vault } = this.plugin.app;
    const normalizedPath = (0, import_obsidian3.normalizePath)(path);
    const existingFolder = vault.getAbstractFileByPath(normalizedPath);
    if (existingFolder instanceof import_obsidian3.TFolder) {
      return existingFolder;
    }
    const pathParts = normalizedPath.split("/");
    let currentPath = "";
    for (const part of pathParts) {
      if (!part)
        continue;
      currentPath += (currentPath ? "/" : "") + part;
      const folder = vault.getAbstractFileByPath(currentPath);
      if (!folder) {
        await vault.createFolder(currentPath);
      } else if (!(folder instanceof import_obsidian3.TFolder)) {
        throw new Error(`Path ${currentPath} exists but is not a folder`);
      }
    }
    return vault.getAbstractFileByPath(normalizedPath);
  }
  /**
   * Gets the full path for a directory within the plugin's base folder
   */
  getPluginDirectoryPath(relativePath) {
    const { baseFolder } = this.plugin.settings;
    return PathUtils.joinPath(baseFolder, relativePath);
  }
  /**
   * Gets the journal directory path
   */
  getJournalPath() {
    const { baseFolder, journalRootFolder } = this.plugin.settings;
    return PathUtils.joinPath(baseFolder, journalRootFolder);
  }
  /**
   * Gets the workspace directory path  
   */
  getWorkspacePath() {
    const { baseFolder, documentDirectory } = this.plugin.settings;
    return PathUtils.joinPath(baseFolder, documentDirectory);
  }
  /**
   * Applies a directory template to create structured folders
   */
  async applyDirectoryTemplate(basePath, template) {
    for (const [key, value] of Object.entries(template)) {
      const dirPath = PathUtils.joinPath(basePath, key);
      await this.getOrCreateDirectory(dirPath);
      if (value && typeof value === "object") {
        await this.applyDirectoryTemplate(dirPath, value);
      }
    }
  }
  /**
   * Validates if a given path is within allowed directories
   */
  isValidPath(path) {
    const normalizedPath = (0, import_obsidian3.normalizePath)(path);
    const { restrictedDirectories } = this.plugin.settings;
    if (!restrictedDirectories || restrictedDirectories.length === 0) {
      return true;
    }
    return !restrictedDirectories.some((dir) => {
      const normalizedDir = (0, import_obsidian3.normalizePath)(dir);
      return normalizedPath === normalizedDir || normalizedPath.startsWith(normalizedDir + "/");
    });
  }
  /**
   * Lists all directories in the vault
   */
  getAllDirectories() {
    const { vault } = this.plugin.app;
    return vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian3.TFolder);
  }
  /**
   * Creates a directory with a specific template structure within the plugin's base folder
   */
  async createProjectDirectory(name, template) {
    const sanitizedName = PathUtils.sanitizePath(name);
    const workspacePath = this.getWorkspacePath();
    const projectPath = PathUtils.joinPath(workspacePath, sanitizedName);
    const projectFolder = await this.getOrCreateDirectory(projectPath);
    if (template) {
      await this.applyDirectoryTemplate(projectPath, template);
    }
    return projectFolder;
  }
};

// src/managers/journalManager.ts
var import_obsidian5 = require("obsidian");

// src/utils/dateUtils.ts
var import_obsidian4 = require("obsidian");
var DateUtils = class {
  static extractDateFromFilename(filename, format) {
    try {
      const date = (0, import_obsidian4.moment)(filename, format, true);
      return date.isValid() ? date : null;
    } catch (error) {
      return null;
    }
  }
  static formatDate(date, format = "YYYY-MM-DD") {
    const m = date instanceof Date ? (0, import_obsidian4.moment)(date) : date;
    return m.format(format);
  }
  static getJournalPath(date, baseFolder, journalFolder, dateFormat) {
    const m = date instanceof Date ? (0, import_obsidian4.moment)(date) : date;
    const year = m.format("YYYY");
    const monthName = m.format("MMMM");
    const fileName = m.format(dateFormat || "YYYY-MM-DD dddd");
    return `${baseFolder}/${journalFolder}/y_${year}/${monthName}/${fileName}.md`;
  }
  static getCurrentMonth() {
    return (0, import_obsidian4.moment)().format("MMMM");
  }
  static getCurrentYear() {
    return (0, import_obsidian4.moment)().format("YYYY");
  }
  static getMonthlyFolderName(date) {
    const m = date instanceof Date ? (0, import_obsidian4.moment)(date) : date;
    return `y_${m.format("YYYY")}/${m.format("MMMM")}`;
  }
};

// src/managers/journalManager.ts
var JournalManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Creates or opens a journal entry for the specified date
   * Automatically creates monthly folders as needed
   */
  async createOrOpenJournalEntry(date) {
    const { vault } = this.plugin.app;
    const { journalDateFormat, journalTemplate } = this.plugin.settings;
    await this.ensureMonthlyFolderExists(date);
    const monthlyFolderPath = this.getMonthlyFolderPath(date);
    const fileName = date.format(journalDateFormat || "YYYY-MM-DD dddd");
    const filePath = (0, import_obsidian5.normalizePath)(`${monthlyFolderPath}/${fileName}.md`);
    let file = vault.getAbstractFileByPath(filePath);
    if (!file) {
      const content = await this.generateJournalContent(date);
      file = await vault.create(filePath, content);
      console.log(`Created daily note: ${filePath}`);
    }
    return file;
  }
  /**
   * Ensures the monthly folder exists for the given date
   * Creates the folder structure if it doesn't exist
   */
  async ensureMonthlyFolderExists(date) {
    const monthlyFolderPath = this.getMonthlyFolderPath(date);
    await this.plugin.directoryManager.getOrCreateDirectory(monthlyFolderPath);
    console.log(`Ensured monthly folder exists: ${monthlyFolderPath}`);
  }
  /**
   * Gets the monthly folder path for a given date
   * Uses the new base folder structure: LinkPlugin/journal/y_YYYY/MonthName/
   */
  getMonthlyFolderPath(date) {
    const journalBasePath = this.plugin.directoryManager.getJournalPath();
    const year = date.format("YYYY");
    const monthName = date.format("MMMM");
    return `${journalBasePath}/y_${year}/${monthName}`;
  }
  /**
   * Creates a daily note for today if it doesn't exist
   * Automatically handles monthly folder creation
   */
  async createTodayNote() {
    const today = (0, import_obsidian5.moment)();
    return await this.createOrOpenJournalEntry(today);
  }
  /**
   * Creates a daily note for a future date
   * Automatically creates monthly folders as needed
   */
  async createFutureDailyNote(date) {
    const targetDate = typeof date === "string" ? (0, import_obsidian5.moment)(date) : (0, import_obsidian5.moment)(date);
    return await this.createOrOpenJournalEntry(targetDate);
  }
  /**
   * Generate content for a journal entry
   */
  async generateJournalContent(date) {
    const { journalTemplate, journalDateFormat } = this.plugin.settings;
    const previousDay = (0, import_obsidian5.moment)(date).subtract(1, "day");
    const nextDay = (0, import_obsidian5.moment)(date).add(1, "day");
    const previousLink = `[[${previousDay.format(journalDateFormat || "YYYY-MM-DD dddd")}]]`;
    const nextLink = `[[${nextDay.format(journalDateFormat || "YYYY-MM-DD dddd")}]]`;
    const currentDate = date.format("YYYY-MM-DD");
    const title = date.format(journalDateFormat || "YYYY-MM-DD dddd");
    if (journalTemplate) {
      return journalTemplate.replace(/{{date}}/g, currentDate).replace(/{{title}}/g, title).replace(/{{previous}}/g, previousLink).replace(/{{next}}/g, nextLink);
    }
    return `---
date: ${currentDate}
previous: ${previousLink}
next: ${nextLink}
tags:
  - journal
---

# ${title}

## Daily Log

## Tasks
- [ ] 

## Notes

## Reflection

---
Previous: ${previousLink} | Next: ${nextLink}
`;
  }
  /**
   * Opens the journal entry for today
   * Creates monthly folder and daily note if they don't exist
   */
  async openTodayJournal() {
    const today = (0, import_obsidian5.moment)();
    const file = await this.createOrOpenJournalEntry(today);
    const leaf = this.plugin.app.workspace.getLeaf();
    await leaf.openFile(file);
  }
  /**
   * Checks if we need to create a new monthly folder
   * Called when the plugin loads or when creating notes
   */
  async checkAndCreateCurrentMonthFolder() {
    const currentDate = (0, import_obsidian5.moment)();
    await this.ensureMonthlyFolderExists(currentDate);
  }
  /**
   * Creates monthly folders for a range of dates
   * Useful for batch creation or setup
   */
  async createMonthlyFoldersForRange(startDate, endDate) {
    const current = (0, import_obsidian5.moment)(startDate).startOf("month");
    const end = (0, import_obsidian5.moment)(endDate).endOf("month");
    while (current.isSameOrBefore(end)) {
      await this.ensureMonthlyFolderExists(current);
      current.add(1, "month");
    }
  }
  /**
   * Opens journal entry for a specific date
   */
  async openJournalForDate(date) {
    const momentDate = typeof date === "string" ? (0, import_obsidian5.moment)(date) : (0, import_obsidian5.moment)(date);
    const file = await this.createOrOpenJournalEntry(momentDate);
    const leaf = this.plugin.app.workspace.getLeaf();
    await leaf.openFile(file);
  }
  /**
   * Updates links between journal entries
   */
  async updateJournalLinks(file) {
    const { vault } = this.plugin.app;
    const { journalDateFormat } = this.plugin.settings;
    const fileDate = DateUtils.extractDateFromFilename(file.basename, journalDateFormat);
    if (!fileDate)
      return;
    const content = await vault.read(file);
    const previousDay = (0, import_obsidian5.moment)(fileDate).subtract(1, "day");
    const nextDay = (0, import_obsidian5.moment)(fileDate).add(1, "day");
    const previousFileName = previousDay.format(journalDateFormat || "YYYY-MM-DD dddd");
    const nextFileName = nextDay.format(journalDateFormat || "YYYY-MM-DD dddd");
    const updatedContent = content.replace(/previous: '\[\[(.*?)\]\]'/g, `previous: '[[${previousFileName}]]'`).replace(/next: '\[\[(.*?)\]\]'/g, `next: '[[${nextFileName}]]'`);
    if (content !== updatedContent) {
      await vault.modify(file, updatedContent);
    }
  }
  /**
   * Get all journal entries in a date range
   */
  async getJournalEntries(startDate, endDate) {
    const { vault } = this.plugin.app;
    const entries = [];
    const current = (0, import_obsidian5.moment)(startDate);
    while (current.isSameOrBefore(endDate)) {
      const entryPath = DateUtils.getJournalPath(
        current,
        this.plugin.settings.journalRootFolder,
        this.plugin.settings.journalFolderFormat,
        this.plugin.settings.journalDateFormat
      );
      const file = vault.getAbstractFileByPath(entryPath);
      if (file) {
        entries.push({
          date: current.format("YYYY-MM-DD"),
          path: file.path,
          title: file.basename,
          previous: (0, import_obsidian5.moment)(current).subtract(1, "day").format("YYYY-MM-DD"),
          next: (0, import_obsidian5.moment)(current).add(1, "day").format("YYYY-MM-DD")
        });
      }
      current.add(1, "day");
    }
    return entries;
  }
};

// src/managers/linkManager.ts
var import_obsidian6 = require("obsidian");
var LinkManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Create a new note from selected text and link to it
   */
  async createLinkedNote(selection, editor, view) {
    const { vault } = this.plugin.app;
    const currentFile = view.file;
    if (!currentFile) {
      throw new Error("No active file found");
    }
    const fileName = this.sanitizeFileName(selection);
    const directoryPath = this.determineTargetDirectory(fileName);
    const filePath = (0, import_obsidian6.normalizePath)(`${directoryPath}/${fileName}.md`);
    let file = vault.getAbstractFileByPath(filePath);
    if (!file) {
      await this.plugin.directoryManager.getOrCreateDirectory(directoryPath);
      const content = this.generateNoteContent(selection, currentFile);
      file = await vault.create(filePath, content);
    }
    editor.replaceSelection(`[[${fileName}]]`);
    if (this.plugin.settings.openNewNote) {
      const leaf = this.plugin.app.workspace.splitActiveLeaf();
      await leaf.openFile(file);
    }
  }
  /**
   * Determine the appropriate directory for a new note
   */
  determineTargetDirectory(title) {
    const { documentDirectory } = this.plugin.settings;
    const keywords = title.toLowerCase();
    if (keywords.includes("project") || keywords.includes("work")) {
      return "Workspace";
    } else if (keywords.includes("reference") || keywords.includes("definition")) {
      return "References";
    } else if (keywords.includes("template")) {
      return "Templates";
    }
    return documentDirectory || "Documents";
  }
  /**
   * Generate content for a new linked note
   */
  generateNoteContent(title, sourceFile) {
    const { noteTemplate } = this.plugin.settings;
    const currentDate = new Date().toISOString().split("T")[0];
    if (noteTemplate) {
      return noteTemplate.replace(/{{title}}/g, title).replace(/{{date}}/g, currentDate).replace(/{{source}}/g, `[[${sourceFile.basename}]]`);
    }
    return `---
title: ${title}
created: ${currentDate}
source: [[${sourceFile.basename}]]
tags: []
---

# ${title}

`;
  }
  /**
   * Sanitize a string for use as a filename
   */
  sanitizeFileName(input) {
    return input.replace(REGEX_PATTERNS.INVALID_FILENAME_CHARS, "").replace(/\s+/g, " ").trim().substring(0, 100);
  }
  /**
   * Find all links in a file
   */
  async findLinksInFile(file) {
    const { vault } = this.plugin.app;
    const content = await vault.read(file);
    const links = [];
    let match;
    while ((match = REGEX_PATTERNS.WIKI_LINK.exec(content)) !== null) {
      links.push(match[1]);
    }
    return links;
  }
  /**
   * Find all backlinks to a file
   */
  async findBacklinks(file) {
    const { vault } = this.plugin.app;
    const files = vault.getMarkdownFiles();
    const backlinks = [];
    for (const potentialSource of files) {
      if (potentialSource.path === file.path)
        continue;
      const links = await this.findLinksInFile(potentialSource);
      if (links.includes(file.basename)) {
        backlinks.push(potentialSource);
      }
    }
    return backlinks;
  }
  /**
   * Find broken links in the vault
   */
  async findBrokenLinks() {
    const { vault } = this.plugin.app;
    const files = vault.getMarkdownFiles();
    const brokenLinksData = [];
    for (const file of files) {
      const links = await this.findLinksInFile(file);
      const brokenLinks = [];
      for (const link of links) {
        const linkedFile = vault.getAbstractFileByPath(`${link}.md`) || vault.getAbstractFileByPath(link);
        if (!linkedFile) {
          brokenLinks.push(link);
        }
      }
      if (brokenLinks.length > 0) {
        brokenLinksData.push({ file, brokenLinks });
      }
    }
    return brokenLinksData;
  }
  /**
   * Find orphaned notes (notes with no backlinks)
   */
  async findOrphanedNotes() {
    const { vault } = this.plugin.app;
    const files = vault.getMarkdownFiles();
    const orphanedNotes = [];
    for (const file of files) {
      const backlinks = await this.findBacklinks(file);
      if (backlinks.length === 0) {
        orphanedNotes.push(file);
      }
    }
    return orphanedNotes;
  }
  /**
   * Generate link suggestions based on content similarity
   */
  async generateLinkSuggestions(file, limit = 5) {
    const { vault } = this.plugin.app;
    const files = vault.getMarkdownFiles();
    const suggestions = [];
    const currentContent = await vault.read(file);
    const currentWords = this.extractWords(currentContent);
    for (const otherFile of files) {
      if (otherFile.path === file.path)
        continue;
      const otherContent = await vault.read(otherFile);
      const otherWords = this.extractWords(otherContent);
      const relevance = this.calculateRelevance(currentWords, otherWords);
      if (relevance > 0.1) {
        suggestions.push({
          title: otherFile.basename,
          path: otherFile.path,
          relevance,
          type: "existing"
        });
      }
    }
    return suggestions.sort((a, b) => b.relevance - a.relevance).slice(0, limit);
  }
  /**
   * Extract meaningful words from content
   */
  extractWords(content) {
    const words = /* @__PURE__ */ new Set();
    const text = content.replace(/[#*`\[\]()]/g, "").toLowerCase().split(/\s+/);
    for (const word of text) {
      if (word.length > 3 && !this.isStopWord(word)) {
        words.add(word);
      }
    }
    return words;
  }
  /**
   * Calculate relevance between two sets of words
   */
  calculateRelevance(words1, words2) {
    const intersection = new Set([...words1].filter((word) => words2.has(word)));
    const union = /* @__PURE__ */ new Set([...words1, ...words2]);
    return intersection.size / union.size;
  }
  /**
   * Check if a word is a stop word
   */
  isStopWord(word) {
    const stopWords = /* @__PURE__ */ new Set([
      "the",
      "a",
      "an",
      "and",
      "or",
      "but",
      "in",
      "on",
      "at",
      "to",
      "for",
      "of",
      "with",
      "by",
      "is",
      "are",
      "was",
      "were",
      "be",
      "been",
      "have",
      "has",
      "had",
      "do",
      "does",
      "did",
      "will",
      "would",
      "could",
      "should",
      "may",
      "might",
      "must",
      "can",
      "this",
      "that",
      "these",
      "those"
    ]);
    return stopWords.has(word);
  }
};

// src/shortcodes/tokenizer.ts
var Tokenizer = class {
  /**
   * Tokenize an Emmet-like shortcode string
   */
  tokenize(input) {
    const tokens = [];
    let currentPos = 0;
    while (currentPos < input.length) {
      const char = input[currentPos];
      if (this.isNameChar(char)) {
        const { token, newPos } = this.tokenizeElement(input, currentPos);
        tokens.push(token);
        currentPos = newPos;
        continue;
      }
      if (this.isOperator(char)) {
        tokens.push({
          type: "operator",
          value: char
        });
        currentPos++;
        continue;
      }
      if (char === "{") {
        const { token, newPos } = this.tokenizeContent(input, currentPos);
        tokens.push(token);
        currentPos = newPos;
        continue;
      }
      if (char === "[") {
        const { token, newPos } = this.tokenizeAttribute(input, currentPos);
        tokens.push(token);
        currentPos = newPos;
        continue;
      }
      if (char === "(") {
        const { token, newPos } = this.tokenizeGroup(input, currentPos);
        tokens.push(token);
        currentPos = newPos;
        continue;
      }
      if (char === " " || char === "	" || char === "\n") {
        currentPos++;
        continue;
      }
      throw new Error(`Unexpected character: ${char} at position ${currentPos}`);
    }
    return tokens;
  }
  tokenizeElement(input, startPos) {
    let endPos = startPos;
    while (endPos < input.length && this.isNameChar(input[endPos])) {
      endPos++;
    }
    if (endPos < input.length && input[endPos] === "*") {
      const elementName = input.substring(startPos, endPos);
      endPos++;
      const numberStartPos = endPos;
      while (endPos < input.length && /\d/.test(input[endPos])) {
        endPos++;
      }
      const multiplier = parseInt(input.substring(numberStartPos, endPos), 10);
      return {
        token: {
          type: "element",
          value: elementName,
          children: [{
            type: "multiplier",
            value: multiplier.toString()
          }]
        },
        newPos: endPos
      };
    }
    return {
      token: {
        type: "element",
        value: input.substring(startPos, endPos)
      },
      newPos: endPos
    };
  }
  tokenizeContent(input, startPos) {
    let endPos = startPos + 1;
    let depth = 1;
    while (endPos < input.length && depth > 0) {
      if (input[endPos] === "{")
        depth++;
      if (input[endPos] === "}")
        depth--;
      endPos++;
    }
    if (depth !== 0) {
      throw new Error("Unclosed content braces");
    }
    return {
      token: {
        type: "content",
        value: input.substring(startPos + 1, endPos - 1)
      },
      newPos: endPos
    };
  }
  tokenizeAttribute(input, startPos) {
    let endPos = startPos + 1;
    let depth = 1;
    while (endPos < input.length && depth > 0) {
      if (input[endPos] === "[")
        depth++;
      if (input[endPos] === "]")
        depth--;
      endPos++;
    }
    if (depth !== 0) {
      throw new Error("Unclosed attribute brackets");
    }
    return {
      token: {
        type: "attribute",
        value: input.substring(startPos + 1, endPos - 1)
      },
      newPos: endPos
    };
  }
  tokenizeGroup(input, startPos) {
    let endPos = startPos + 1;
    let depth = 1;
    while (endPos < input.length && depth > 0) {
      if (input[endPos] === "(")
        depth++;
      if (input[endPos] === ")")
        depth--;
      endPos++;
    }
    if (depth !== 0) {
      throw new Error("Unclosed group parentheses");
    }
    const groupContent = input.substring(startPos + 1, endPos - 1);
    const childTokens = new Tokenizer().tokenize(groupContent);
    return {
      token: {
        type: "group",
        value: groupContent,
        children: childTokens
      },
      newPos: endPos
    };
  }
  isNameChar(char) {
    return /[a-zA-Z0-9_-]/.test(char);
  }
  isOperator(char) {
    return char === ">" || char === "+" || char === "*";
  }
};

// src/shortcodes/parser.ts
var Parser = class {
  /**
   * Parse tokens into an Abstract Syntax Tree
   */
  parse(tokens) {
    const ast = [];
    let currentNode = null;
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      switch (token.type) {
        case "element":
          currentNode = {
            type: "element",
            name: token.value,
            children: []
          };
          if (token.children && token.children.length > 0) {
            const multiplier = token.children.find((child) => child.type === "multiplier");
            if (multiplier) {
              currentNode.repeat = parseInt(multiplier.value, 10);
            }
          }
          ast.push(currentNode);
          break;
        case "content":
          if (currentNode) {
            currentNode.content = token.value;
          }
          break;
        case "attribute":
          if (currentNode) {
            currentNode.attributes = this.parseAttributes(token.value);
          }
          break;
        case "operator":
          if (token.value === ">" && i + 1 < tokens.length) {
            const childTokens = [tokens[++i]];
            const childNodes = this.parse(childTokens);
            if (currentNode && childNodes.length > 0) {
              currentNode.children = currentNode.children || [];
              currentNode.children.push(...childNodes);
              childNodes.forEach((child) => child.parent = currentNode.name);
            }
          } else if (token.value === "+") {
            continue;
          }
          break;
        case "group":
          if (token.children) {
            const groupNodes = this.parse(token.children);
            ast.push(...groupNodes);
          }
          break;
      }
    }
    return ast;
  }
  parseAttributes(attrString) {
    const attributes = {};
    if (attrString.includes("=")) {
      const pairs = attrString.split(/\s+/);
      for (const pair of pairs) {
        const [key, value] = pair.split("=");
        if (key && value) {
          attributes[key] = value.replace(/["']/g, "");
        }
      }
    } else {
      attributes.value = attrString;
    }
    return attributes;
  }
  /**
   * Validate the AST structure
   */
  validate(ast) {
    for (const node of ast) {
      if (!node.name && node.type === "element") {
        return false;
      }
      if (node.children && node.children.length > 0) {
        if (!this.validate(node.children)) {
          return false;
        }
      }
    }
    return true;
  }
};

// src/shortcodes/transformer.ts
var Transformer = class {
  transform(ast) {
    return ast.map((node) => node.content || "").join("\n");
  }
};

// src/shortcodes/registry.ts
var ShortcodeManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.tokenizer = new Tokenizer();
    this.parser = new Parser();
    this.transformer = new Transformer();
  }
  checkForShortcodes(editor) {
  }
  showHelpModal() {
  }
};

// src/utils/errorHandler.ts
var import_obsidian7 = require("obsidian");
var ErrorHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  handleError(error, context) {
    const message = error instanceof Error ? error.message : String(error);
    console.error(`${context}: ${message}`);
    new import_obsidian7.Notice(`${context}: ${message}`);
  }
  showNotice(message, duration) {
    new import_obsidian7.Notice(message, duration);
  }
  showSuccess(message) {
    new import_obsidian7.Notice(message, 3e3);
  }
  showWarning(message) {
    new import_obsidian7.Notice(`\u26A0\uFE0F ${message}`, 5e3);
  }
};

// src/main.ts
var LinkPlugin = class extends import_obsidian8.Plugin {
  async onload() {
    console.log("Loading Link Plugin...");
    try {
      await this.loadSettings();
      this.errorHandler = new ErrorHandler(this);
      this.directoryManager = new DirectoryManager(this);
      this.journalManager = new JournalManager(this);
      this.linkManager = new LinkManager(this);
      this.shortcodeManager = new ShortcodeManager(this);
      this.addSettingTab(new SettingsTab(this.app, this));
      this.registerCommands();
      this.registerEventHandlers();
      await this.directoryManager.rebuildDirectoryStructure();
      await this.journalManager.checkAndCreateCurrentMonthFolder();
      console.log("Link Plugin loaded successfully");
    } catch (error) {
      console.error("Failed to load Link Plugin:", error);
      if (this.errorHandler) {
        this.errorHandler.handleError(error, "Plugin initialization failed");
      }
    }
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = validateSettings(loadedData || {});
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  registerCommands() {
    this.addCommand({
      id: COMMAND_IDS.CREATE_LINKED_NOTE,
      name: "Create Linked Note from Selection",
      editorCallback: (editor, view) => {
        try {
          const selection = editor.getSelection();
          if (selection) {
            this.linkManager.createLinkedNote(selection, editor, view);
          } else {
            this.errorHandler.handleError(new Error("No text selected"), "Please select text to create a linked note");
          }
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to create linked note");
        }
      }
    });
    this.addCommand({
      id: COMMAND_IDS.REBUILD_DIRECTORY,
      name: "Rebuild Directory Structure",
      callback: () => {
        try {
          this.directoryManager.rebuildDirectoryStructure();
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to rebuild directory structure");
        }
      }
    });
    this.addCommand({
      id: COMMAND_IDS.OPEN_TODAY_JOURNAL,
      name: "Open Today's Journal",
      callback: () => {
        try {
          this.journalManager.openTodayJournal();
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to open today's journal");
        }
      }
    });
    this.addCommand({
      id: COMMAND_IDS.CREATE_TODAY_NOTE,
      name: "Create Today's Daily Note",
      callback: async () => {
        try {
          const file = await this.journalManager.createTodayNote();
          const leaf = this.app.workspace.getLeaf();
          await leaf.openFile(file);
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to create today's note");
        }
      }
    });
    this.addCommand({
      id: COMMAND_IDS.CREATE_MONTHLY_FOLDERS,
      name: "Create Monthly Folders for Current Year",
      callback: async () => {
        try {
          const startOfYear = window.moment().startOf("year");
          const endOfYear = window.moment().endOf("year");
          await this.journalManager.createMonthlyFoldersForRange(startOfYear, endOfYear);
          this.errorHandler.showNotice("Monthly folders created for current year");
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to create monthly folders");
        }
      }
    });
    this.addCommand({
      id: "show-shortcode-help",
      name: "Show Shortcode Help",
      callback: () => {
        try {
          this.shortcodeManager.showHelpModal();
        } catch (error) {
          this.errorHandler.handleError(error, "Failed to show shortcode help");
        }
      }
    });
  }
  registerEventHandlers() {
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        if (this.settings.shortcodeEnabled) {
          this.shortcodeManager.checkForShortcodes(editor);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file.path.includes(this.settings.journalRootFolder)) {
          this.journalManager.updateJournalLinks(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (this.settings.debugMode) {
          console.log("File modified:", file.path);
        }
      })
    );
  }
  onunload() {
    console.log("Link Plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/commands/createLinkedNote.ts
var import_obsidian2 = require("obsidian");

// src/utils/linkUtils.ts
function createWikiLink(fileName) {
  return `[[${fileName}]]`;
}
function createMarkdownLink(fileName, displayText) {
  return `[${displayText}](${fileName}.md)`;
}

// src/utils/fileUtils.ts
function sanitizeFileName(name) {
  return name.toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9-]/g, "").replace(/-+/g, "-");
}

// src/modals/newNoteModal.ts
var import_obsidian = require("obsidian");
var NewNoteModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Enter note name" });
    const inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "Note name"
    });
    inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        this.close();
        this.onSubmit(inputEl.value);
      }
    });
    const buttonEl = contentEl.createEl("button", {
      text: "Create"
    });
    buttonEl.addEventListener("click", () => {
      this.close();
      this.onSubmit(inputEl.value);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/commands/createLinkedNote.ts
async function createLinkedNote(plugin, editor) {
  let noteName = editor.getSelection();
  if (!noteName) {
    noteName = await promptForNoteName(plugin);
    if (!noteName)
      return;
  }
  const fileName = sanitizeFileName(noteName);
  try {
    await createNote(plugin, fileName, noteName);
    insertNoteLink(plugin, editor, fileName, noteName);
    new import_obsidian2.Notice(`Created new note: ${fileName}`);
  } catch (error) {
    new import_obsidian2.Notice(`Error creating note: ${error}`);
  }
}
async function promptForNoteName(plugin) {
  return new Promise((resolve) => {
    const modal = new NewNoteModal(plugin.app, (result) => {
      resolve(result);
    });
    modal.open();
  });
}
async function createNote(plugin, fileName, noteName) {
  const exists = await plugin.app.vault.adapter.exists(`${fileName}.md`);
  if (exists) {
    throw new Error(`Note "${fileName}" already exists!`);
  }
  await plugin.app.vault.create(`${fileName}.md`, `# ${noteName}

`);
}
function insertNoteLink(plugin, editor, fileName, noteName) {
  const linkText = plugin.settings.defaultLinkStyle === "wiki" ? createWikiLink(fileName) : createMarkdownLink(fileName, noteName);
  editor.replaceSelection(linkText);
}

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  defaultLinkStyle: "markdown",
  autoFormatLinks: true
};

// src/main.ts
var LinkPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "format-link",
      name: "Format selected link",
      editorCallback: (editor, view) => {
        new import_obsidian3.Notice("Link formatting command triggered");
      }
    });
    this.addCommand({
      id: "create-linked-note",
      name: "Create new linked note",
      editorCallback: async (editor, view) => {
        await createLinkedNote(this, editor);
      }
    });
    this.addSettingTab(new LinkSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LinkSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Plugin Settings" });
    new import_obsidian3.Setting(containerEl).setName("Default link style").setDesc("Choose the default style for new links").addDropdown(
      (dropdown) => dropdown.addOption("markdown", "Markdown").addOption("wiki", "Wiki").setValue(this.plugin.settings.defaultLinkStyle).onChange(async (value) => {
        this.plugin.settings.defaultLinkStyle = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Auto-format links").setDesc("Automatically format links when creating notes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoFormatLinks).onChange(async (value) => {
        this.plugin.settings.autoFormatLinks = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,

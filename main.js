/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/commands/createLinkedNote.ts
var import_obsidian2 = require("obsidian");

// src/utils/linkUtils.ts
function createWikiLink(fileName) {
  return `[[${fileName}]]`;
}
function createMarkdownLink(fileName, displayText) {
  return `[${displayText}](${fileName}.md)`;
}

// src/utils/fileUtils.ts
function sanitizeFileName(name) {
  return name.toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9-]/g, "").replace(/-+/g, "-");
}

// src/modals/newNoteModal.ts
var import_obsidian = require("obsidian");
var NewNoteModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Enter note name" });
    const inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "Note name"
    });
    inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        this.close();
        this.onSubmit(inputEl.value);
      }
    });
    const buttonEl = contentEl.createEl("button", {
      text: "Create"
    });
    buttonEl.addEventListener("click", () => {
      this.close();
      this.onSubmit(inputEl.value);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/errorUtils.ts
var LinkPluginError = class extends Error {
  constructor(message, code, details) {
    super(message);
    this.code = code;
    this.details = details;
    this.name = "LinkPluginError";
  }
};
function handleError(error) {
  console.debug("Handling error:", error);
  if (error instanceof LinkPluginError) {
    return error;
  }
  if (error instanceof Error) {
    if (error.message.includes("already exists")) {
      return new LinkPluginError(
        "A file with this name already exists",
        "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */,
        error
      );
    }
    if (error.message.includes("not found")) {
      return new LinkPluginError(
        "The requested file or folder was not found",
        "FILE_NOT_FOUND" /* FILE_NOT_FOUND */,
        error
      );
    }
  }
  return new LinkPluginError(
    "An unexpected error occurred",
    "UNEXPECTED_ERROR" /* UNEXPECTED_ERROR */,
    error
  );
}
function getUserFriendlyMessage(error) {
  switch (error.code) {
    case "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */:
      return "A note with this name already exists. Please choose a different name.";
    case "FILE_NOT_FOUND" /* FILE_NOT_FOUND */:
      return "The specified file or folder could not be found.";
    case "FOLDER_CREATION_FAILED" /* FOLDER_CREATION_FAILED */:
      return "Failed to create the required folder structure.";
    case "TEMPLATE_NOT_FOUND" /* TEMPLATE_NOT_FOUND */:
      return "The template file could not be found. Using default template instead.";
    case "TEMPLATE_INVALID" /* TEMPLATE_INVALID */:
      return "The template file is invalid or corrupted.";
    case "SETTINGS_INVALID" /* SETTINGS_INVALID */:
      return "The plugin settings are invalid. Please check your configuration.";
    case "NOTE_CREATION_FAILED" /* NOTE_CREATION_FAILED */:
      return "Failed to create the new note. Please try again.";
    case "INVALID_NOTE_NAME" /* INVALID_NOTE_NAME */:
      return "The note name contains invalid characters. Please use a different name.";
    default:
      return "An unexpected error occurred. Please check the console for details.";
  }
}

// src/commands/createLinkedNote.ts
var NOTE_TYPES = {
  daily: {
    type: "daily",
    template: "DailyNoteTemplate",
    folder: "DailyNotes",
    tags: ["daily", "journal"]
  },
  project: {
    type: "project",
    template: "ProjectTemplate",
    folder: "Projects",
    tags: ["project", "active"]
  },
  resource: {
    type: "resource",
    template: "ResourceTemplate",
    folder: "Resources",
    tags: ["resource", "reference"]
  }
};
async function createLinkedNote(plugin, editor) {
  try {
    console.debug("Creating linked note...");
    let noteName = editor.getSelection();
    if (!noteName) {
      noteName = await promptForNoteName(plugin);
      if (!noteName) {
        console.debug("Note creation cancelled");
        return;
      }
    }
    if (!isValidNoteName(noteName)) {
      throw new LinkPluginError(
        "Invalid note name",
        "INVALID_NOTE_NAME" /* INVALID_NOTE_NAME */,
        { noteName }
      );
    }
    const noteType = await determineNoteType(plugin, noteName);
    const fileName = sanitizeFileName(noteName);
    const newNote = await createNote(plugin, fileName, noteName, noteType);
    if (newNote) {
      console.debug("Note created successfully:", newNote.path);
      insertNoteLink(plugin, editor, fileName, noteName);
      new import_obsidian2.Notice(`Created new note: ${fileName}`);
    }
  } catch (error) {
    const pluginError = handleError(error);
    console.error("Error creating linked note:", pluginError);
    new import_obsidian2.Notice(getUserFriendlyMessage(pluginError));
  }
}
async function promptForNoteName(plugin) {
  return new Promise((resolve) => {
    const modal = new NewNoteModal(plugin.app, (result) => {
      resolve(result);
    });
    modal.open();
  });
}
async function determineNoteType(plugin, noteName) {
  return NOTE_TYPES.project;
}
async function createNote(plugin, fileName, noteName, noteType) {
  try {
    const folderPath = noteType.folder;
    if (!await plugin.app.vault.adapter.exists(folderPath)) {
      try {
        await plugin.app.vault.createFolder(folderPath);
      } catch (error) {
        throw new LinkPluginError(
          `Failed to create folder: ${folderPath}`,
          "FOLDER_CREATION_FAILED" /* FOLDER_CREATION_FAILED */,
          error
        );
      }
    }
    const fullPath = `${folderPath}/${fileName}.md`;
    const exists = await plugin.app.vault.adapter.exists(fullPath);
    if (exists) {
      throw new LinkPluginError(
        `Note "${fileName}" already exists`,
        "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */,
        { path: fullPath }
      );
    }
    const content = await getTemplateContent(plugin, noteType, noteName);
    return await plugin.app.vault.create(fullPath, content);
  } catch (error) {
    throw handleError(error);
  }
}
async function getTemplateContent(plugin, noteType, noteName) {
  try {
    const templatePath = `Templates/${noteType.template}.md`;
    const templateFile = plugin.app.vault.getAbstractFileByPath(templatePath);
    if (templateFile instanceof import_obsidian2.TFile) {
      const content = await plugin.app.vault.read(templateFile);
      return processTemplate(content, noteName, noteType);
    }
    console.debug("Template not found, using default");
    return getDefaultTemplate(noteName, noteType);
  } catch (error) {
    console.warn("Error loading template:", error);
    return getDefaultTemplate(noteName, noteType);
  }
}
function getDefaultTemplate(noteName, noteType) {
  return `# ${noteName}

`;
}
function insertNoteLink(plugin, editor, fileName, noteName) {
  const linkText = plugin.settings.defaultLinkStyle === "wiki" ? createWikiLink(fileName) : createMarkdownLink(fileName, noteName);
  editor.replaceSelection(linkText);
}
function isValidNoteName(name) {
  return Boolean(
    name && name.length > 0 && name.length <= 255 && !name.includes("/")
    // Add other invalid characters as needed
  );
}

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  defaultLinkStyle: "markdown",
  autoFormatLinks: true
};

// src/modals/helpModal.ts
var import_obsidian3 = require("obsidian");
var HelpModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    console.debug("Opening help modal");
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Link Plugin Help" });
    console.debug("Help modal content created");
    this.createSection(contentEl, "Core Features", [
      {
        title: "\u{1F4DD} Creating Linked Notes",
        description: 'Select text and use the command "Create new linked note" or Ctrl/Cmd + L to create a new linked note. The selected text becomes the note title.'
      },
      {
        title: "\u{1F4C1} Folder Organization",
        description: "Notes are automatically organized into DailyNotes, Projects, Resources, or Archives based on their type and content."
      },
      {
        title: "\u{1F3F7}\uFE0F Metadata Management",
        description: "Each note type includes specific metadata and tags for better organization and searchability."
      }
    ]);
    this.createSection(contentEl, "Available Templates", [
      {
        title: "\u{1F4C5} Daily Notes",
        description: "For daily journal entries and task logs. Includes sections for routine checklist and to-do lists."
      },
      {
        title: "\u{1F4CA} Project Notes",
        description: "For project documentation. Includes overview, objectives, and task tracking sections."
      },
      {
        title: "\u{1F4DA} Resource Notes",
        description: "For reference materials and research. Includes source attribution and summary sections."
      }
    ]);
    this.createSection(contentEl, "Quick Tips", [
      {
        title: "\u2328\uFE0F Keyboard Shortcuts",
        description: "Use Ctrl/Cmd + L: Create new linked note\nCtrl/Cmd + Shift + L: Format existing link"
      },
      {
        title: "\u{1F504} Auto-formatting",
        description: "Links are automatically formatted based on your preferred style (Wiki or Markdown) set in settings."
      },
      {
        title: "\u{1F4CB} Templates",
        description: "Custom templates can be added to the Templates folder and will be automatically recognized."
      }
    ]);
    this.createSection(contentEl, "Settings", [
      {
        title: "\u2699\uFE0F Plugin Settings",
        description: "Access settings via Settings > Link Plugin to customize:\n- Default link style\n- Auto-formatting options\n- Folder locations\n- Template preferences"
      }
    ]);
    new import_obsidian3.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Close").setCta().onClick(() => {
        this.close();
      })
    );
    console.debug("Help modal sections created");
  }
  createSection(container, title, items) {
    const sectionEl = container.createEl("div", { cls: "help-section" });
    sectionEl.createEl("h3", { text: title });
    const listEl = sectionEl.createEl("div", { cls: "help-list" });
    items.forEach((item) => {
      const itemEl = listEl.createEl("div", { cls: "help-item" });
      itemEl.createEl("h4", { text: item.title });
      itemEl.createEl("p", { text: item.description });
    });
  }
  onClose() {
    console.debug("Closing help modal");
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var LinkPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    try {
      console.group("Link Plugin Loading");
      console.debug("Starting plugin initialization...");
      console.time("Plugin Load Time");
      console.debug("Loading plugin settings...");
      await this.loadSettings();
      console.debug("Settings loaded successfully:", this.settings);
      console.group("Registering Commands");
      try {
        this.registerCommands();
        console.debug("Commands registered successfully");
      } catch (error) {
        console.error("Error registering commands:", error);
        throw error;
      } finally {
        console.groupEnd();
      }
      console.debug("Adding settings tab...");
      this.addSettingTab(new LinkSettingTab(this.app, this));
      console.debug("Settings tab added successfully");
      console.debug("Adding ribbon icon...");
      try {
        const ribbonIconEl = this.addRibbonIcon(
          "help",
          "Link Plugin Help",
          (evt) => {
            console.debug("Help ribbon icon clicked", evt);
            new HelpModal(this.app).open();
          }
        );
        ribbonIconEl.addClass("link-plugin-ribbon-icon");
        console.debug("Ribbon icon added successfully");
      } catch (error) {
        console.error("Error adding ribbon icon:", error);
        throw error;
      }
      console.timeEnd("Plugin Load Time");
      console.debug("Plugin loaded successfully");
    } catch (error) {
      console.error("Fatal error during plugin initialization:", error);
      new import_obsidian4.Notice("Error loading Link Plugin. Check console for details.");
    } finally {
      console.groupEnd();
    }
  }
  registerCommands() {
    console.debug("Registering format link command...");
    this.addCommand({
      id: "format-link",
      name: "Format selected link",
      editorCallback: (editor, view) => {
        console.debug("Format link command triggered");
        console.debug("Current selection:", editor.getSelection());
        new import_obsidian4.Notice("Link formatting command triggered");
      }
    });
    console.debug("Registering create linked note command...");
    this.addCommand({
      id: "create-linked-note",
      name: "Create new linked note",
      editorCallback: async (editor, view) => {
        console.debug("Create linked note command triggered");
        await createLinkedNote(this, editor);
      }
    });
  }
  async onunload() {
    console.group("Link Plugin Unloading");
    console.debug("Starting plugin cleanup...");
    console.time("Plugin Unload Time");
    try {
      console.debug("Plugin cleanup completed");
    } catch (error) {
      console.error("Error during plugin cleanup:", error);
    } finally {
      console.timeEnd("Plugin Unload Time");
      console.groupEnd();
    }
  }
  async loadSettings() {
    console.debug("Loading settings...");
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.debug("Settings loaded:", this.settings);
  }
  async saveSettings() {
    console.debug("Saving settings...");
    await this.saveData(this.settings);
    console.debug("Settings saved");
  }
};
var LinkSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Plugin Settings" });
    new import_obsidian4.Setting(containerEl).setName("Default link style").setDesc("Choose the default style for new links").addDropdown(
      (dropdown) => dropdown.addOption("markdown", "Markdown").addOption("wiki", "Wiki").setValue(this.plugin.settings.defaultLinkStyle).onChange(async (value) => {
        this.plugin.settings.defaultLinkStyle = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Auto-format links").setDesc("Automatically format links when creating notes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoFormatLinks).onChange(async (value) => {
        this.plugin.settings.autoFormatLinks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Help").setDesc("Open the help documentation").addButton(
      (btn) => btn.setButtonText("Open Help").setCta().onClick(() => {
        new HelpModal(this.app).open();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,

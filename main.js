/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/commands/createLinkedNote.ts
var import_obsidian2 = require("obsidian");

// src/utils/fileUtils.ts
function sanitizeFileName(name) {
  return name.toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9-]/g, "").replace(/-+/g, "-");
}

// src/modals/newNoteModal.ts
var import_obsidian = require("obsidian");
var NewNoteModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Enter note name" });
    const inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "Note name"
    });
    inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        this.close();
        this.onSubmit(inputEl.value);
      }
    });
    const buttonEl = contentEl.createEl("button", {
      text: "Create"
    });
    buttonEl.addEventListener("click", () => {
      this.close();
      this.onSubmit(inputEl.value);
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/errorUtils.ts
var LinkPluginError = class extends Error {
  constructor(message, code, details) {
    super(message);
    this.code = code;
    this.details = details;
    this.name = "LinkPluginError";
  }
};
function handleError(error) {
  console.debug("Handling error:", error);
  if (error instanceof LinkPluginError) {
    return error;
  }
  if (error instanceof Error) {
    if (error.message.includes("already exists")) {
      return new LinkPluginError(
        "A file with this name already exists",
        "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */,
        error
      );
    }
    if (error.message.includes("not found")) {
      return new LinkPluginError(
        "The requested file or folder was not found",
        "FILE_NOT_FOUND" /* FILE_NOT_FOUND */,
        error
      );
    }
  }
  return new LinkPluginError(
    "An unexpected error occurred",
    "UNEXPECTED_ERROR" /* UNEXPECTED_ERROR */,
    error
  );
}

// src/commands/createLinkedNote.ts
async function createLinkedNote(plugin, editor) {
  try {
    console.debug("Creating linked note...");
    let noteName = editor.getSelection();
    if (!noteName) {
      noteName = await promptForNoteName(plugin);
      if (!noteName) {
        console.debug("Note creation cancelled");
        return;
      }
    }
    if (!isValidNoteName(noteName)) {
      throw new LinkPluginError(
        "Invalid note name",
        "INVALID_NOTE_NAME" /* INVALID_NOTE_NAME */,
        { noteName }
      );
    }
    const fileName = sanitizeFileName(noteName);
    const newNote = await createNote(plugin, fileName, noteName);
    if (newNote) {
      console.debug("Note created successfully:", newNote.path);
      insertNoteLink(editor, fileName);
      new import_obsidian2.Notice(`Created new note: ${fileName}`);
    }
  } catch (error) {
    const pluginError = handleError(error);
    console.error("Error creating linked note:", pluginError);
    new import_obsidian2.Notice(pluginError.message);
  }
}
async function promptForNoteName(plugin) {
  return new Promise((resolve) => {
    const modal = new NewNoteModal(plugin.app, (result) => {
      resolve(result);
    });
    modal.open();
  });
}
async function createNote(plugin, fileName, noteName) {
  const fullPath = `${fileName}.md`;
  const exists = await plugin.app.vault.adapter.exists(fullPath);
  if (exists) {
    throw new LinkPluginError(
      `Note "${fileName}" already exists`,
      "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */,
      { path: fullPath }
    );
  }
  const content = `# ${noteName}

`;
  return await plugin.app.vault.create(fullPath, content);
}
function insertNoteLink(editor, fileName) {
  editor.replaceSelection(`[[${fileName}]]`);
}
function isValidNoteName(name) {
  return Boolean(
    name && name.length > 0 && name.length <= 255 && !name.includes("/") && !name.includes("\\")
  );
}

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  defaultLinkStyle: "markdown",
  autoFormatLinks: true
};

// src/modals/helpModal.ts
var import_obsidian3 = require("obsidian");
var HelpModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Link Plugin Help" });
    this.createSection("Core Features", [
      {
        title: "\u{1F4DD} Creating Linked Notes",
        description: "Enter a name for your new note in the popup dialog to create a linked note."
      }
    ]);
    this.createSection("Settings", [
      {
        title: "\u2699\uFE0F Plugin Settings",
        description: "Access settings via Settings > Link Plugin to customize:\n- Default link style (Wiki or Markdown)\n- Auto-format links toggle"
      }
    ]);
    const buttons = new import_obsidian3.Setting(contentEl);
    buttons.addButton(
      (btn) => btn.setButtonText("Open Settings").onClick(() => {
        this.close();
        this.app.setting.openTabById("obsidian-link-plugin");
      })
    ).addButton(
      (btn) => btn.setButtonText("Close").setCta().onClick(() => {
        this.close();
      })
    );
  }
  createSection(title, items) {
    const section = this.contentEl.createEl("div", { cls: "help-section" });
    section.createEl("h3", { text: title });
    const list = section.createEl("div", { cls: "help-list" });
    items.forEach((item) => {
      const itemEl = list.createEl("div", { cls: "help-item" });
      itemEl.createEl("h4", { text: item.title });
      itemEl.createEl("p", { text: item.description });
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/main.ts
var LinkPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    try {
      console.group("Link Plugin Loading");
      console.debug("Starting plugin initialization...");
      console.time("Plugin Load Time");
      console.debug("Loading plugin settings...");
      await this.loadSettings();
      console.debug("Settings loaded successfully:", this.settings);
      console.group("Registering Commands");
      try {
        this.registerCommands();
        console.debug("Commands registered successfully");
      } catch (error) {
        console.error("Error registering commands:", error);
        throw error;
      } finally {
        console.groupEnd();
      }
      console.debug("Adding settings tab...");
      this.addSettingTab(new LinkSettingTab(this.app, this));
      console.debug("Settings tab added successfully");
      console.debug("Adding ribbon icon...");
      try {
        const ribbonIconEl = this.addRibbonIcon(
          "help",
          "Link Plugin Help",
          (evt) => {
            console.debug("Help ribbon icon clicked", evt);
            new HelpModal(this.app).open();
          }
        );
        ribbonIconEl.addClass("link-plugin-ribbon-icon");
        console.debug("Ribbon icon added successfully");
      } catch (error) {
        console.error("Error adding ribbon icon:", error);
        throw error;
      }
      console.timeEnd("Plugin Load Time");
      console.debug("Plugin loaded successfully");
    } catch (error) {
      console.error("Fatal error during plugin initialization:", error);
      new import_obsidian4.Notice("Error loading Link Plugin. Check console for details.");
    } finally {
      console.groupEnd();
    }
  }
  registerCommands() {
    console.debug("Registering format link command...");
    this.addCommand({
      id: "format-link",
      name: "Format selected link",
      editorCallback: (editor, view) => {
        console.debug("Format link command triggered");
        console.debug("Current selection:", editor.getSelection());
        new import_obsidian4.Notice("Link formatting command triggered");
      }
    });
    console.debug("Registering create linked note command...");
    this.addCommand({
      id: "create-linked-note",
      name: "Create new linked note",
      editorCallback: async (editor, view) => {
        console.debug("Create linked note command triggered");
        await createLinkedNote(this, editor);
      }
    });
  }
  async onunload() {
    console.group("Link Plugin Unloading");
    console.debug("Starting plugin cleanup...");
    console.time("Plugin Unload Time");
    try {
      console.debug("Plugin cleanup completed");
    } catch (error) {
      console.error("Error during plugin cleanup:", error);
    } finally {
      console.timeEnd("Plugin Unload Time");
      console.groupEnd();
    }
  }
  async loadSettings() {
    console.debug("Loading settings...");
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.debug("Settings loaded:", this.settings);
  }
  async saveSettings() {
    console.debug("Saving settings...");
    await this.saveData(this.settings);
    console.debug("Settings saved");
  }
};
var LinkSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Plugin Settings" });
    new import_obsidian4.Setting(containerEl).setName("Default link style").setDesc("Choose the default style for new links").addDropdown(
      (dropdown) => dropdown.addOption("markdown", "Markdown").addOption("wiki", "Wiki").setValue(this.plugin.settings.defaultLinkStyle).onChange(async (value) => {
        this.plugin.settings.defaultLinkStyle = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Auto-format links").setDesc("Automatically format links when creating notes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoFormatLinks).onChange(async (value) => {
        this.plugin.settings.autoFormatLinks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Help").setDesc("Open the help documentation").addButton(
      (btn) => btn.setButtonText("Open Help").setCta().onClick(() => {
        new HelpModal(this.app).open();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,

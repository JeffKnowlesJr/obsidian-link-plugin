/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WebSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableSearch: true
};
var WebSearchPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new WebSearchSettingTab(this));
    this.addCommand({
      id: "search-google",
      name: "Search Google",
      callback: () => {
        if (!this.settings.enableSearch) {
          new import_obsidian.Notice("Web search is disabled in settings.");
          return;
        }
        new GoogleSearchModal(this).open();
      }
    });
    this.addCommand({
      id: "summarize-url",
      name: "Summarize Web Page",
      callback: () => {
        new SummarizePageModal(this).open();
      }
    });
  }
  async googleSearch(query) {
    const API_KEY = "your_google_api_key";
    const SEARCH_ENGINE_ID = "your_search_engine_id";
    const url = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(
      query
    )}&key=${API_KEY}&cx=${SEARCH_ENGINE_ID}`;
    const response = await fetch(url);
    const data = await response.json();
    return data.items.map((item) => `- [${item.title}](${item.link})`).join("\n");
  }
  async createNote(title, content) {
    const file = `${title}.md`;
    await this.app.vault.create(file, content);
    new import_obsidian.Notice(`Created note: ${file}`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var GoogleSearchModal = class extends import_obsidian.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.inputQuery = "";
    this.plugin = plugin;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Google Search" });
    const input = new import_obsidian.TextAreaComponent(contentEl);
    input.setPlaceholder("Enter your search query...");
    input.inputEl.style.width = "100%";
    input.inputEl.style.height = "60px";
    input.onChange((value) => {
      this.inputQuery = value;
    });
    const button = new import_obsidian.ButtonComponent(contentEl);
    button.setButtonText("Search");
    button.onClick(async () => {
      if (this.inputQuery.trim() === "") {
        new import_obsidian.Notice("Please enter a search query.");
        return;
      }
      new import_obsidian.Notice(`Searching: ${this.inputQuery}...`);
      let results = await this.plugin.googleSearch(this.inputQuery);
      this.plugin.createNote("Search Results", results);
      this.close();
    });
    input.inputEl.focus();
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var SummarizePageModal = class extends import_obsidian.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.inputUrl = "";
    this.plugin = plugin;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Summarize Web Page" });
    const input = new import_obsidian.TextAreaComponent(contentEl);
    input.setPlaceholder("Enter a webpage URL...");
    input.inputEl.style.width = "100%";
    input.inputEl.style.height = "40px";
    input.onChange((value) => {
      this.inputUrl = value;
    });
    const button = new import_obsidian.ButtonComponent(contentEl);
    button.setButtonText("Summarize");
    button.onClick(async () => {
      if (this.inputUrl.trim() === "") {
        new import_obsidian.Notice("Please enter a valid URL.");
        return;
      }
      new import_obsidian.Notice(`Summarizing: ${this.inputUrl}...`);
      let summary = await this.plugin.summarizePage(this.inputUrl);
      this.plugin.createNote("Page Summary", summary);
      this.close();
    });
    input.inputEl.focus();
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var WebSearchSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable Web Search").setDesc("Turn web search on or off.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableSearch).onChange(async (value) => {
        this.plugin.settings.enableSearch = value;
        await this.plugin.saveSettings();
        new import_obsidian.Notice(`Web Search is now ${value ? "Enabled" : "Disabled"}`);
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/commands/createLinkedNote.ts
var import_obsidian4 = require("obsidian");

// src/utils/fileUtils.ts
function sanitizeFileName(name) {
  return name.toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9-]/g, "").replace(/-+/g, "-");
}

// src/modals/newNoteModal.ts
var import_obsidian2 = require("obsidian");

// src/utils/folderUtils.ts
var import_obsidian = require("obsidian");
var ROOT_FOLDER = "_Link";
var BASE_FOLDERS = {
  JOURNAL: `${ROOT_FOLDER}/_Journal`,
  DOCUMENTS: `${ROOT_FOLDER}/Documents`,
  TEMPLATES: `${ROOT_FOLDER}/Templates`,
  WORKSPACE: `${ROOT_FOLDER}/_Workspace`,
  REFERENCES: `${ROOT_FOLDER}/_References`,
  ARCHIVE: `${ROOT_FOLDER}/Archive`
};
var SUB_FOLDERS = {
  [BASE_FOLDERS.DOCUMENTS]: ["Images", "Videos", "Audio", "Other"],
  [BASE_FOLDERS.REFERENCES]: [
    "Books/Technology",
    "Books/Business",
    "Articles/Blog-Posts",
    "Articles/Research",
    "Courses/Online",
    "Courses/Certifications"
  ],
  [BASE_FOLDERS.ARCHIVE]: [
    "Completed-Projects",
    "Old-References",
    "Old-Templates"
  ]
};
var DEFAULT_TEMPLATE_CONTENT = `---
previous: ''
next: ''
tags: []
resources: []
stakeholders: []
---

## Routine Checklist

- [ ] **Daily Checks**

  - [ ] Bed and Clothes \u{1F6CF}\uFE0F\u{1F9FA}
  - [ ] Self Care\u{1F6C0}\u{1F9F4}
  - [ ] Clean Kitchen \u{1F37D}\u2728
  - [ ] Pet Care \u{1F415}\u{1F6B6}\u{1F3FB}\u200D\u2642\uFE0F
  - [ ] Get Focused \u{1F5A5}\uFE0F\u{1F48A}

- [ ] **Technology Check**
  - [ ] Wear Watch \u231A\uFE0F
  - [ ] Manage [Calendar](https://calendar.google.com) \u{1F4C6}
  - [ ] Check [Mail](https://mail.google.com) \u2709\uFE0F
  - [ ] Review [[December Log]] \u{1F5D3}\uFE0F
  - [ ] Review [[December List]] \u2705

---

## Log

### To Do

- [ ]

### Stream

>

### Events

-

### Work

- ***

## Daily Planning Tips

1. **Set Clear Goals**: Identify three major tasks (\u{1F7E9}\u{1F7E8}\u{1F7E5}), prioritizing one high-impact task (\u{1F7E5}).
2. **Break Down Tasks**: Divide projects into manageable, specific steps.
3. **Use Focus Sessions**: 40 mins work + 10 mins review/break.
4. **Prioritize Early**: Start with critical tasks for peak productivity.
5. **End with Review**: Reflect on accomplishments; outline tomorrow's goals.
6. **Limit Distractions**: Turn off notifications; avoid multitasking.
7. **Organize Visually**: Use Obsidian as a "second brain" reference.
8. **Plan Extra Time**: Buffer for complex tasks to avoid rushing.
9. **Weekly Review**: Adjust goals based on progress and priorities.

### Tip

Incorporate one of these each day to build a strong, consistent planning habit.

---

## Challenges

`;
async function ensureTemplateExists(vault) {
  const templatePath = `${BASE_FOLDERS.TEMPLATES}/Daily Note Template.md`;
  try {
    const exists = await vault.adapter.exists(templatePath);
    if (!exists) {
      await vault.create(templatePath, DEFAULT_TEMPLATE_CONTENT);
      console.debug(`Created template file: ${templatePath}`);
    }
    return templatePath;
  } catch (error) {
    console.error("Error ensuring template exists:", error);
    throw error;
  }
}
async function updateDailyNotesLocation(app) {
  var _a;
  try {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth() + 1;
    const monthName = new Intl.DateTimeFormat("en-US", {
      month: "short"
    }).format(now);
    const yearFolder = `${BASE_FOLDERS.JOURNAL}/y_${year}`;
    const monthFolder = `${yearFolder}/m_${String(month).padStart(
      2,
      "0"
    )}_${monthName}`;
    await createFolderIfNotExists(app.vault, yearFolder);
    await createFolderIfNotExists(app.vault, monthFolder);
    const templatePath = await ensureTemplateExists(app.vault);
    try {
      const dailyNotesSettings = await app.vault.adapter.read(".obsidian/daily-notes.json").catch(() => "{}");
      const settings = JSON.parse(dailyNotesSettings);
      settings.folder = monthFolder;
      settings.template = templatePath;
      settings.format = "YYYY-MM-DD dddd";
      await app.vault.adapter.write(
        ".obsidian/daily-notes.json",
        JSON.stringify(settings, null, 2)
      );
      const dailyNotesPlugin = (_a = app.internalPlugins) == null ? void 0 : _a.plugins["daily-notes"];
      if (dailyNotesPlugin == null ? void 0 : dailyNotesPlugin.enabled) {
        dailyNotesPlugin.instance.options = settings;
      }
    } catch (error) {
      console.error("Error updating daily notes settings:", error);
    }
    return monthFolder;
  } catch (error) {
    console.error("Error updating daily notes location:", error);
    throw new Error("Failed to update daily notes location");
  }
}
async function ensureFolderStructure(app) {
  try {
    await createFolderIfNotExists(app.vault, ROOT_FOLDER);
    for (const folder of Object.values(BASE_FOLDERS)) {
      await createFolderIfNotExists(app.vault, folder);
    }
    for (const [baseFolder, subFolders] of Object.entries(SUB_FOLDERS)) {
      for (const subFolder of subFolders) {
        const fullPath = `${baseFolder}/${subFolder}`;
        await createFolderIfNotExists(app.vault, fullPath);
      }
    }
    await updateDailyNotesLocation(app);
  } catch (error) {
    console.error("Error ensuring folder structure:", error);
    throw new Error("Failed to create folder structure");
  }
}
async function createFolderIfNotExists(vault, path) {
  try {
    const exists = await vault.adapter.exists(path);
    if (!exists) {
      await vault.createFolder(path);
      console.debug(`Created folder: ${path}`);
    }
  } catch (error) {
    console.error(`Error creating folder ${path}:`, error);
    throw error;
  }
}
async function ensureFutureDailyNoteFolder(app, date) {
  try {
    const year = date.year();
    const month = date.month() + 1;
    const monthName = date.format("MMM");
    const yearFolder = `${BASE_FOLDERS.JOURNAL}/y_${year}`;
    const monthFolder = `${yearFolder}/m_${String(month).padStart(
      2,
      "0"
    )}_${monthName}`;
    await createFolderIfNotExists(app.vault, yearFolder);
    await createFolderIfNotExists(app.vault, monthFolder);
    return monthFolder;
  } catch (error) {
    console.error("Error creating future daily note folder:", error);
    throw new Error("Failed to create future daily note folder");
  }
}
async function createDailyNoteContent(app, noteName, date) {
  try {
    const templatePath = `${BASE_FOLDERS.TEMPLATES}/Daily Note Template.md`;
    let templateContent = await app.vault.adapter.read(templatePath);
    if (date) {
      const prevDate = (0, import_obsidian.moment)(date).subtract(1, "day");
      const nextDate = (0, import_obsidian.moment)(date).add(1, "day");
      const prevLink = `${prevDate.format("YYYY-MM-DD")} ${prevDate.format(
        "dddd"
      )}`;
      const nextLink = `${nextDate.format("YYYY-MM-DD")} ${nextDate.format(
        "dddd"
      )}`;
      templateContent = templateContent.replace(/previous: ''/g, `previous: '[[${prevLink}]]'`).replace(/next: ''/g, `next: '[[${nextLink}]]'`).replace(/{{date:YYYY-MM-DD}}/g, date.format("YYYY-MM-DD")).replace(/{{time:HH:mm}}/g, (0, import_obsidian.moment)().format("HH:mm")).replace(
        /{{date:dddd, MMMM D, YYYY}}/g,
        date.format("dddd, MMMM D, YYYY")
      );
      const monthName = date.format("MMMM");
      templateContent = templateContent.replace(/\[\[December Log\]\]/g, `[[${monthName} Log]]`).replace(/\[\[December List\]\]/g, `[[${monthName} List]]`);
    }
    return templateContent;
  } catch (error) {
    console.error("Error reading template:", error);
    return `# ${noteName}

Created: ${(0, import_obsidian.moment)().format(
      "YYYY-MM-DD HH:mm"
    )}

`;
  }
}

// src/modals/newNoteModal.ts
var NewNoteModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.result = { name: "", folder: "" };
    this.isFutureDaily = false;
    this.containers = {};
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Create New Note" });
    new import_obsidian2.Setting(contentEl).setName("Note Type").setDesc("Choose the type of note to create").addDropdown((dropdown) => {
      dropdown.addOption("regular", "Regular Note").addOption("future", "Future Daily Note").onChange((value) => {
        var _a, _b;
        this.isFutureDaily = value === "future";
        if (this.isFutureDaily) {
          this.result.folder = BASE_FOLDERS.JOURNAL;
          (_b = (_a = this.folderDropdown) == null ? void 0 : _a.components[0]) == null ? void 0 : _b.setValue(BASE_FOLDERS.JOURNAL);
        }
        this.result.isFutureDaily = this.isFutureDaily;
        this.updateFormVisibility();
      });
    });
    this.containers.datePickerContainer = contentEl.createDiv();
    this.containers.datePickerContainer.style.display = "none";
    new import_obsidian2.Setting(this.containers.datePickerContainer).setName("Date").setDesc("Choose the date for the future daily note").addText((text) => {
      const datePickerEl = text.inputEl;
      datePickerEl.type = "date";
      const tomorrow = (0, import_obsidian2.moment)().add(1, "day").format("YYYY-MM-DD");
      datePickerEl.value = tomorrow;
      datePickerEl.min = tomorrow;
      datePickerEl.addEventListener("change", () => {
        this.result.date = (0, import_obsidian2.moment)(datePickerEl.value);
        if (this.isFutureDaily) {
          this.result.name = this.result.date.format("YYYY-MM-DD dddd");
        }
        if (this.inputEl) {
          this.inputEl.value = this.result.name;
        }
      });
      this.result.date = (0, import_obsidian2.moment)(tomorrow);
      this.result.name = this.result.date.format("YYYY-MM-DD dddd");
    });
    this.containers.nameContainer = contentEl.createDiv();
    new import_obsidian2.Setting(this.containers.nameContainer).setName("Note Name").setDesc("Enter the name for your new note").addText((text) => {
      this.inputEl = text.inputEl;
      text.inputEl.placeholder = "Note name";
      text.inputEl.addEventListener("input", () => {
        if (!this.isFutureDaily) {
          this.result.name = text.inputEl.value;
        }
      });
      text.inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && this.isValid()) {
          this.close();
          this.onSubmit(this.result);
        }
      });
    });
    this.containers.folderContainer = contentEl.createDiv();
    this.folderDropdown = new import_obsidian2.Setting(this.containers.folderContainer).setName("Location").setDesc("Choose where to create the note").addDropdown((dropdown) => {
      Object.entries(BASE_FOLDERS).forEach(([key, value]) => {
        dropdown.addOption(value, value);
      });
      dropdown.onChange((value) => {
        if (!this.isFutureDaily) {
          this.result.folder = value;
        }
      });
      dropdown.setValue(BASE_FOLDERS.JOURNAL);
      this.result.folder = BASE_FOLDERS.JOURNAL;
    });
    const buttonDiv = contentEl.createDiv("button-container");
    buttonDiv.style.display = "flex";
    buttonDiv.style.justifyContent = "flex-end";
    buttonDiv.style.gap = "10px";
    buttonDiv.style.marginTop = "20px";
    const createButton = buttonDiv.createEl("button", {
      text: "Create",
      cls: "mod-cta"
    });
    createButton.addEventListener("click", () => {
      if (this.isValid()) {
        this.close();
        this.onSubmit(this.result);
      }
    });
    const cancelButton = buttonDiv.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => {
      this.close();
      this.onSubmit(null);
    });
    this.updateFormVisibility();
    this.inputEl.focus();
  }
  updateFormVisibility() {
    if (this.isFutureDaily) {
      this.containers.datePickerContainer.style.display = "block";
      this.containers.nameContainer.style.display = "none";
      this.containers.folderContainer.style.display = "none";
    } else {
      this.containers.datePickerContainer.style.display = "none";
      this.containers.nameContainer.style.display = "block";
      this.containers.folderContainer.style.display = "block";
      this.result.date = void 0;
    }
  }
  isValid() {
    if (this.isFutureDaily) {
      return Boolean(this.result.date);
    }
    return Boolean(this.result.name && this.result.folder);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/errorHandler.ts
var import_obsidian3 = require("obsidian");
var LinkPluginError = class extends Error {
  constructor(message, code, originalError) {
    super(message);
    this.code = code;
    this.originalError = originalError;
    this.name = "LinkPluginError";
  }
};
function handlePluginError(error, context) {
  const pluginError = ensurePluginError(error, context);
  console.error(`[Link Plugin] ${context}:`, pluginError);
  new import_obsidian3.Notice(`Link Plugin: ${pluginError.message}`);
  throw pluginError;
}
function ensurePluginError(error, context) {
  if (error instanceof LinkPluginError) {
    return error;
  }
  const message = error instanceof Error ? error.message : String(error);
  return new LinkPluginError(
    `${context}: ${message}`,
    "FILE_CREATION_FAILED" /* FILE_CREATION_FAILED */,
    error instanceof Error ? error : void 0
  );
}

// src/commands/createLinkedNote.ts
async function createLinkedNote(plugin, editor) {
  try {
    const result = await getNoteName(editor, plugin);
    if (!result) {
      return;
    }
    let { name: noteName, folder } = result;
    if (result.isFutureDaily && result.date) {
      folder = await ensureFutureDailyNoteFolder(plugin.app, result.date);
    }
    const fileName = await validateAndSanitizeFileName(noteName);
    const fullPath = `${folder}/${fileName}`;
    const newNote = await createNoteFile(plugin, fullPath, noteName, result);
    const linkPath = fullPath.replace(`${ROOT_FOLDER}/`, "");
    await insertNoteLinkInEditor(editor, linkPath);
    new import_obsidian4.Notice(`Created new note: ${linkPath}`);
  } catch (error) {
    handlePluginError(error, "Failed to create linked note");
  }
}
async function getNoteName(editor, plugin) {
  const selection = editor.getSelection();
  return new Promise((resolve) => {
    const modal = new NewNoteModal(plugin.app, (result) => {
      if (result) {
        resolve(result);
      } else {
        resolve(null);
      }
    });
    modal.open();
    if (selection) {
      modal.inputEl.value = selection;
      modal.result.name = selection;
    }
  });
}
async function validateAndSanitizeFileName(name) {
  if (!isValidNoteName(name)) {
    throw new LinkPluginError("Invalid note name", "INVALID_NOTE_NAME" /* INVALID_NOTE_NAME */);
  }
  return sanitizeFileName(name);
}
async function createNoteFile(plugin, fullPath, noteName, options) {
  try {
    const exists = await plugin.app.vault.adapter.exists(`${fullPath}.md`);
    if (exists) {
      throw new LinkPluginError(
        `Note "${fullPath}" already exists`,
        "FILE_ALREADY_EXISTS" /* FILE_ALREADY_EXISTS */
      );
    }
    let content;
    if (options.isFutureDaily) {
      content = await createDailyNoteContent2(plugin.app, noteName, options.date);
    } else {
      content = `# ${noteName}

`;
    }
    return await plugin.app.vault.create(`${fullPath}.md`, content);
  } catch (error) {
    if (error instanceof LinkPluginError) {
      throw error;
    }
    throw new LinkPluginError(
      "Failed to create note file",
      "FILE_OPERATION_FAILED" /* FILE_OPERATION_FAILED */,
      error instanceof Error ? error : void 0
    );
  }
}
async function createDailyNoteContent2(app, noteName, date) {
  try {
    const templatePath = `${BASE_FOLDERS.TEMPLATES}/Daily Note Template.md`;
    let templateContent = await app.vault.adapter.read(templatePath);
    if (date) {
      const prevDate = (0, import_obsidian4.moment)(date).subtract(1, "day");
      const nextDate = (0, import_obsidian4.moment)(date).add(1, "day");
      const prevLink = `${prevDate.format("YYYY-MM-DD")} ${prevDate.format(
        "dddd"
      )}`;
      const nextLink = `${nextDate.format("YYYY-MM-DD")} ${nextDate.format(
        "dddd"
      )}`;
      templateContent = templateContent.replace(/previous: ''/g, `previous: '[[${prevLink}]]'`).replace(/next: ''/g, `next: '[[${nextLink}]]'`).replace(/{{date:YYYY-MM-DD}}/g, date.format("YYYY-MM-DD")).replace(/{{time:HH:mm}}/g, (0, import_obsidian4.moment)().format("HH:mm")).replace(
        /{{date:dddd, MMMM D, YYYY}}/g,
        date.format("dddd, MMMM D, YYYY")
      );
      const monthName = date.format("MMMM");
      templateContent = templateContent.replace(/\[\[December Log\]\]/g, `[[${monthName} Log]]`).replace(/\[\[December List\]\]/g, `[[${monthName} List]]`);
    }
    return templateContent;
  } catch (error) {
    console.error("Error reading template:", error);
    return `# ${noteName}

Created: ${(0, import_obsidian4.moment)().format(
      "YYYY-MM-DD HH:mm"
    )}

`;
  }
}
async function insertNoteLinkInEditor(editor, fullPath) {
  var _a;
  try {
    const displayName = ((_a = fullPath.split("/").pop()) == null ? void 0 : _a.replace(".md", "")) || fullPath;
    editor.replaceSelection(`[[${fullPath}|${displayName}]]`);
  } catch (error) {
    throw new LinkPluginError(
      "Failed to insert note link",
      "LINK_INSERTION_FAILED" /* LINK_INSERTION_FAILED */,
      error instanceof Error ? error : void 0
    );
  }
}
function isValidNoteName(name) {
  return Boolean(
    name && name.length > 0 && name.length <= 255 && !name.includes("/") && !name.includes("\\")
  );
}

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  defaultLinkStyle: "markdown",
  autoFormatLinks: true,
  dailyNotesLocation: "",
  autoRevealFile: true
};

// src/modals/baseModal.ts
var import_obsidian5 = require("obsidian");
var BasePluginModal = class extends import_obsidian5.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.renderContent();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  createSection(title, items) {
    const section = this.contentEl.createEl("div", { cls: "help-section" });
    section.createEl("h3", { text: title });
    const list = section.createEl("div", { cls: "help-list" });
    items.forEach((item) => {
      const itemEl = list.createEl("div", { cls: "help-item" });
      itemEl.createEl("h4", { text: item.title });
      itemEl.createEl("p", { text: item.description });
    });
  }
  addActionButtons(actions) {
    const buttonContainer = new import_obsidian5.Setting(this.contentEl);
    actions.forEach(({ text, isCta, onClick }) => {
      buttonContainer.addButton((btn) => {
        btn.setButtonText(text);
        if (isCta)
          btn.setCta();
        btn.onClick(onClick);
        return btn;
      });
    });
  }
};

// src/modals/helpModal.ts
var HelpModal = class extends BasePluginModal {
  constructor(app) {
    super(app);
  }
  renderContent() {
    this.contentEl.createEl("h2", { text: "Link Plugin Help" });
    this.createSection("Core Features", [
      {
        title: "\u{1F4DD} Creating Linked Notes",
        description: "Enter a name for your new note in the popup dialog to create a linked note."
      }
    ]);
    this.createSection("Settings", [
      {
        title: "\u2699\uFE0F Plugin Settings",
        description: "Access settings via Settings > Link Plugin to customize:\n- Default link style (Wiki or Markdown)\n- Auto-format links toggle"
      }
    ]);
    this.addActionButtons([
      {
        text: "Open Settings",
        onClick: () => {
          this.close();
          this.app.setting.openTabById("obsidian-link-plugin");
        }
      },
      {
        text: "Close",
        isCta: true,
        onClick: () => this.close()
      }
    ]);
  }
};

// src/main.ts
var ConfirmationModal = class extends import_obsidian6.Modal {
  constructor(app, onConfirm) {
    super(app);
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Regenerate Folder Structure?" });
    contentEl.createEl("p", {
      text: `The ${ROOT_FOLDER} folder has been deleted. Would you like to regenerate the folder structure?`
    });
    const buttonContainer = contentEl.createDiv("button-container");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "20px";
    const confirmButton = buttonContainer.createEl("button", {
      text: "Yes, regenerate",
      cls: "mod-cta"
    });
    confirmButton.addEventListener("click", async () => {
      this.close();
      this.onConfirm();
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "No, keep it deleted"
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var LinkPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    try {
      console.group("Link Plugin Loading");
      console.debug("Starting plugin initialization...");
      console.time("Plugin Load Time");
      console.debug("Loading plugin settings...");
      await this.loadSettings();
      console.debug("Settings loaded successfully:", this.settings);
      console.debug("Ensuring folder structure...");
      try {
        await ensureFolderStructure(this.app);
        const newLocation = await updateDailyNotesLocation(this.app);
        this.settings.dailyNotesLocation = newLocation;
        await this.saveSettings();
        console.debug("Folder structure verified/created successfully");
      } catch (error) {
        console.error("Error ensuring folder structure:", error);
        new import_obsidian6.Notice(
          "Error creating folder structure. Check console for details."
        );
      }
      this.app.workspace.onLayoutReady(() => {
        this.patchDailyNotes();
      });
      this.registerEvent(
        // @ts-ignore - The type definitions are incomplete
        this.app.vault.on("create", async (file) => {
          if (this.isDailyNote(file)) {
            await this.enhanceDailyNote(file);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("file-create", async (file) => {
          if (this.isDailyNote(file)) {
            await this.enhanceDailyNote(file);
          }
        })
      );
      this.registerEvent(
        this.app.workspace.on("file-open", (file) => {
          if (this.settings.autoRevealFile && file) {
            this.revealFileInExplorer(file);
          }
        })
      );
      this.registerRootFolderCheck();
      this.registerInterval(
        window.setInterval(async () => {
          try {
            const currentLocation = this.settings.dailyNotesLocation;
            const newLocation = await updateDailyNotesLocation(this.app);
            if (currentLocation !== newLocation) {
              this.settings.dailyNotesLocation = newLocation;
              await this.saveSettings();
              console.debug("Daily notes location updated:", newLocation);
            }
          } catch (error) {
            console.error("Error updating daily notes location:", error);
          }
        }, 1e3 * 60 * 60)
        // Check every hour
      );
      console.group("Registering Commands");
      try {
        this.registerCommands();
        console.debug("Commands registered successfully");
      } catch (error) {
        console.error("Error registering commands:", error);
        throw error;
      } finally {
        console.groupEnd();
      }
      console.debug("Adding settings tab...");
      this.addSettingTab(new LinkSettingTab(this.app, this));
      console.debug("Settings tab added successfully");
      console.debug("Adding ribbon icons...");
      try {
        const helpRibbonIconEl = this.addRibbonIcon(
          "help-circle",
          "Link Plugin Help",
          (evt) => {
            console.debug("Help ribbon icon clicked", evt);
            new HelpModal(this.app).open();
          }
        );
        helpRibbonIconEl.addClass("link-plugin-help-ribbon-icon");
        const createNoteRibbonIconEl = this.addRibbonIcon(
          "link",
          "Create Linked Note",
          async (evt) => {
            console.debug("Create note ribbon icon clicked", evt);
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
            if (activeView) {
              await createLinkedNote(this, activeView.editor);
            } else {
              new import_obsidian6.Notice("Please open a markdown file first");
            }
          }
        );
        createNoteRibbonIconEl.addClass("link-plugin-create-note-ribbon-icon");
        console.debug("Ribbon icons added successfully");
      } catch (error) {
        console.error("Error adding ribbon icons:", error);
        throw error;
      }
      console.timeEnd("Plugin Load Time");
      console.debug("Plugin loaded successfully");
    } catch (error) {
      console.error("Error during plugin initialization:", error);
      console.groupEnd();
      throw error;
    }
  }
  patchDailyNotes() {
    var _a;
    try {
      const dailyNotesPlugin = (_a = this.app.internalPlugins) == null ? void 0 : _a.plugins["daily-notes"];
      if (!(dailyNotesPlugin == null ? void 0 : dailyNotesPlugin.enabled)) {
        console.debug("Daily notes plugin not enabled");
        return;
      }
      const instance = dailyNotesPlugin.instance;
      if (!(instance == null ? void 0 : instance.createDailyNote)) {
        console.debug("Daily notes createDailyNote function not found");
        return;
      }
      const originalCreateDailyNote = instance.createDailyNote.bind(instance);
      instance.createDailyNote = async (date) => {
        try {
          const file = await originalCreateDailyNote(date);
          if (file) {
            await this.enhanceDailyNote(file);
          }
          return file;
        } catch (error) {
          console.error("Error in enhanced createDailyNote:", error);
          return originalCreateDailyNote(date);
        }
      };
      console.debug("Daily notes functionality patched successfully");
    } catch (error) {
      console.error("Error patching daily notes:", error);
    }
  }
  registerRootFolderCheck() {
    this.registerInterval(
      window.setInterval(async () => {
        try {
          const rootExists = await this.app.vault.adapter.exists(ROOT_FOLDER);
          if (!rootExists) {
            console.debug(
              `${ROOT_FOLDER} folder not found, prompting for regeneration`
            );
            new ConfirmationModal(this.app, async () => {
              try {
                await ensureFolderStructure(this.app);
                const newLocation = await updateDailyNotesLocation(this.app);
                this.settings.dailyNotesLocation = newLocation;
                await this.saveSettings();
                new import_obsidian6.Notice(
                  `${ROOT_FOLDER} folder structure has been regenerated`
                );
              } catch (error) {
                console.error("Error regenerating folder structure:", error);
                new import_obsidian6.Notice("Failed to regenerate folder structure");
              }
            }).open();
          }
        } catch (error) {
          console.error("Error checking root folder existence:", error);
        }
      }, 5e3)
    );
  }
  registerCommands() {
    console.debug("Registering format link command...");
    this.addCommand({
      id: "format-link",
      name: "Format selected link",
      editorCallback: (editor, view) => {
        console.debug("Format link command triggered");
        console.debug("Current selection:", editor.getSelection());
        new import_obsidian6.Notice("Link formatting command triggered");
      }
    });
    console.debug("Registering create linked note command...");
    this.addCommand({
      id: "create-linked-note",
      name: "Create new linked note",
      editorCallback: async (editor, view) => {
        console.debug("Create linked note command triggered");
        await createLinkedNote(this, editor);
      }
    });
  }
  async onunload() {
    console.group("Link Plugin Unloading");
    console.debug("Starting plugin cleanup...");
    console.time("Plugin Unload Time");
    try {
      console.debug("Plugin cleanup completed");
    } catch (error) {
      console.error("Error during plugin cleanup:", error);
    } finally {
      console.timeEnd("Plugin Unload Time");
      console.groupEnd();
    }
  }
  async loadSettings() {
    console.debug("Loading settings...");
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.debug("Settings loaded:", this.settings);
  }
  async saveSettings() {
    console.debug("Saving settings...");
    await this.saveData(this.settings);
    console.debug("Settings saved");
  }
  async revealFileInExplorer(file) {
    try {
      const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
      if (!fileExplorer) {
        return;
      }
      const fileExplorerView = fileExplorer.view;
      if (!fileExplorerView) {
        return;
      }
      fileExplorerView.revealInFolder(file);
    } catch (error) {
      console.error("Error revealing file in explorer:", error);
    }
  }
  isDailyNote(file) {
    const dailyNotesPath = this.settings.dailyNotesLocation;
    return file.path.startsWith(dailyNotesPath) && file.extension === "md";
  }
  async enhanceDailyNote(file) {
    try {
      const match = file.basename.match(/^(\d{4}-\d{2}-\d{2})/);
      if (!match)
        return;
      const date = (0, import_obsidian6.moment)(match[1]);
      if (!date.isValid())
        return;
      const currentContent = await this.app.vault.read(file);
      if (!currentContent.includes("previous:") && !currentContent.includes("next:")) {
        const enhancedContent = await createDailyNoteContent(
          this.app,
          file.basename,
          date
        );
        await this.app.vault.modify(file, enhancedContent);
        console.debug(`Enhanced daily note: ${file.path}`);
      }
    } catch (error) {
      console.error("Error enhancing daily note:", error);
    }
  }
};
var LinkSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Link Plugin Settings" });
    new import_obsidian6.Setting(containerEl).setName("Default link style").setDesc("Choose the default style for new links").addDropdown(
      (dropdown) => dropdown.addOption("markdown", "Markdown").addOption("wiki", "Wiki").setValue(this.plugin.settings.defaultLinkStyle).onChange(async (value) => {
        this.plugin.settings.defaultLinkStyle = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Auto-format links").setDesc("Automatically format links when creating notes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoFormatLinks).onChange(async (value) => {
        this.plugin.settings.autoFormatLinks = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Auto-reveal files").setDesc(
      "Automatically reveal and highlight files in the file explorer when opened"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoRevealFile).onChange(async (value) => {
        this.plugin.settings.autoRevealFile = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian6.Setting(containerEl).setName("Help").setDesc("Open the help documentation").addButton(
      (btn) => btn.setButtonText("Open Help").setCta().onClick(() => {
        new HelpModal(this.app).open();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
